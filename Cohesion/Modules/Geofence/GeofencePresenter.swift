//
//  GeofencePresenter.swift
//  Cohesion
//
//  Created by Santi D on 27/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import CoreLocation
import Foundation

final class GeofencePresenter: NSObject {

    // MARK: - Private properties -

    private unowned let view: GeofenceViewInterface
    private let interactor: GeofenceInteractorInterface
    private let wireframe: GeofenceWireframeInterface

    private var locationManager: CLLocationManager?
    
    private lazy var geofenceRegion: CLCircularRegion = {
        let geofenceRegionCenter = CLLocationCoordinate2DMake(Constants.Geofence.longitude, Constants.Geofence.latitude)
        
        let geofenceRegion = CLCircularRegion(center: geofenceRegionCenter, radius: Constants.Geofence.radius, identifier: "notifyMeOnExit")
        geofenceRegion.notifyOnExit = true
        geofenceRegion.notifyOnEntry = true
        
        return geofenceRegion
    }()
    
    // MARK: - Lifecycle -

    init(
        view: GeofenceViewInterface,
        interactor: GeofenceInteractorInterface,
        wireframe: GeofenceWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension GeofencePresenter: GeofencePresenterInterface {
    func requestLocationAccess() {
        locationManager = CLLocationManager()
        locationManager?.delegate = self
        locationManager?.requestAlwaysAuthorization()
    }
 
    func startMonitoring() {
        locationManager?.startMonitoring(for: geofenceRegion)
    }
    
    func stopMonitoring() {
        locationManager?.stopMonitoring(for: geofenceRegion)
    }
}

extension GeofencePresenter: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        if status == .authorizedAlways {
            if CLLocationManager.isMonitoringAvailable(for: CLBeaconRegion.self) && CLLocationManager.isRangingAvailable() {
                view.updateMessageOnScreen(with: "Initialized")
            }
        }
    }

    func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {
        view.userIsNotOnGeofence()
    }
    
    func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {
        view.userIsOnGeofence()
        
        guard let currentLocations: CLLocationCoordinate2D = manager.location?.coordinate else { return }
        
        interactor.saveCoordinates(longitude: currentLocations.longitude, latitude: currentLocations.latitude) { [weak self] errorMessage in
            guard let message = errorMessage else { return }
            
            self?.view.updateMessageOnScreen(with: message)
        }
    }
}
